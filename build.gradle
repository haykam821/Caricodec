plugins {
	id "fabric-loom" version "1.2.+" apply false
	id "maven-publish"
}

repositories {
	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
}

allprojects {
	apply(plugin: "fabric-loom")

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	archivesBaseName = project.archives_base_name
	version = project.mod_version
	group = project.maven_group

	loom {
		runtimeOnlyLog4j = true
	}

	dependencies {
		// Main
		minecraft("com.mojang:minecraft:${project.minecraft_version}")
		mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
		modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
	}

	tasks.withType(ProcessResources).configureEach {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	jar {
		from "LICENSE"
	}
}

subprojects {
	archivesBaseName += "-" + it.name
}

sourceSets {
	testmod {
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.compileClasspath
	}
}

loom {
	runs {
		testmodClient {
			client()
			source(sourceSets.testmod)

			name = "Test Mod Client"
		}

		testmodServer {
			server()
			source(sourceSets.testmod)

			name = "Test Mod Server"
		}
	}

	createRemapConfigurations(sourceSets.testmod)
}

dependencies {
	// Fabric API
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

	afterEvaluate {
		subprojects.each {
			implementation(project(path: "${it.name}", configuration: "namedElements"))
			include(project("${it.name}:"))
		}
	}
}